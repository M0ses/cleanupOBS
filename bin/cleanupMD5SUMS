#!/usr/bin/perl

use strict;
use warnings;

use Path::Class qw/dir file/;
use Data::Dumper;

my $path_to_obs=dir("/srv","obs");

my $md5sum = {};
my $revisions = {};
my $services = {};
my $files_to_delete = {};
my $files_to_keep = {};


if (@ARGV != 2 ) {
	printf("Usage: %s <PROJECT> <PACKAGE>\n",file($0)->basename);
	exit 1;	
}

my ($project,$package)=@ARGV;

my $dir_to_check=dir($path_to_obs,"trees",$project,$package);
my $revisions_file = file($path_to_obs,'projects',$project.".pkg",$package.".rev");

if (! -e $revisions_file ) {
	print "Project or package does't exist! ... exiting\n";
	exit 1;
}

foreach my $line ($revisions_file->slurp) {
	chomp($line);
	my @data=split(/\|/,$line);
	$md5sum->{$data[2]} = 1;
}

foreach my $file ( $dir_to_check->children ) {
	my $file_name = $file->stringify;
	my $file_is_service = 0;
	next if ($file_name !~ /-MD5SUMS$/ );
	foreach my $line ($file->slurp) {
		chomp($line);
		my @data = split(/\s+/,$line);
		if ( $data[1] =~ /\/LSERVICE/ ) {
			$services->{$file_name} = $data[0];
			$file_is_service = 1;
		}
	}

	if ( ! $file_is_service ) {
		my $found = 0;
		foreach my $line ($file->slurp) {
			chomp($line);
			my @data = split(/\s+/,$line);
			if ( $data[1] =~ /\/SERVICE/ ) {
				$revisions->{$file_name} = $data[0];
				$found++;	
				print "Duplicates : $file_name found $found times\n" if ( $found > 1 );
			}
		}
		if (! $found ) {
			$revisions->{$file_name} = 1;
		}
	}
}

foreach my $file_name (keys(%{$revisions})) {
	$file_name =~ /\/(\w{32})-MD5SUMS$/;
	my $md5 = $1;
	my $service_md5 = $revisions->{$file_name};
	if ( $md5sum->{$md5} ) {
		print "found $file_name\n";
		$files_to_keep->{$file_name} = 1;
		if ( $service_md5 ne '1' ) {
			my $service_file=file($dir_to_check,$service_md5."-MD5SUMS");
			$files_to_keep->{$service_file->stringify}=1;
		}
	} else {
		$files_to_delete->{$file_name} = 1;
		if ( $service_md5 ne '1' ) {
			my $service_file=file($dir_to_check,$service_md5."-MD5SUMS");
			$files_to_delete->{$service_file->stringify}=1;
		}
	}
	
}

#print Dumper($files_to_delete,$files_to_keep,$md5sum);

foreach my $file_name (keys(%{$files_to_delete})) {
	printf("Deleting file %s\n",$file_name);
	unlink $file_name;
}

exit 0;
